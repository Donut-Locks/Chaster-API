/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSharedLockRepDto,
  CreateUpdateSharedLockDto,
  GetFavoriteSharedLocksDto,
  GetFavoriteSharedLocksRepDto,
  IsFavoriteSharedLockRepDto,
  SharedLockForPublic,
} from '../models';
import {
    CreateSharedLockRepDtoFromJSON,
    CreateSharedLockRepDtoToJSON,
    CreateUpdateSharedLockDtoFromJSON,
    CreateUpdateSharedLockDtoToJSON,
    GetFavoriteSharedLocksDtoFromJSON,
    GetFavoriteSharedLocksDtoToJSON,
    GetFavoriteSharedLocksRepDtoFromJSON,
    GetFavoriteSharedLocksRepDtoToJSON,
    IsFavoriteSharedLockRepDtoFromJSON,
    IsFavoriteSharedLockRepDtoToJSON,
    SharedLockForPublicFromJSON,
    SharedLockForPublicToJSON,
} from '../models';

export interface SharedLockControllerArchiveRequest {
    sharedLockId: string;
}

export interface SharedLockControllerCreateRequest {
    createUpdateSharedLockDto: CreateUpdateSharedLockDto;
}

export interface SharedLockControllerFindAllRequest {
    status?: SharedLockControllerFindAllStatusEnum;
}

export interface SharedLockControllerFindOneRequest {
    sharedLockId: string;
}

export interface SharedLockControllerUpdateRequest {
    sharedLockId: string;
    createUpdateSharedLockDto: CreateUpdateSharedLockDto;
}

export interface SharedLockFavoriteControllerIsFavoriteRequest {
    sharedLockId: string;
}

export interface SharedLockFavoriteControllerRemoveFavoriteRequest {
    sharedLockId: string;
}

export interface SharedLockFavoriteControllerSetFavoriteRequest {
    sharedLockId: string;
}

export interface SharedLockFavoritesControllerGetFavoriteSharedLocksRequest {
    getFavoriteSharedLocksDto: GetFavoriteSharedLocksDto;
}

/**
 * 
 */
export class SharedLocksApi extends runtime.BaseAPI {

    /**
     * Archives a shared lock
     * Archive a shared lock
     */
    async sharedLockControllerArchiveRaw(requestParameters: SharedLockControllerArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sharedLockId === null || requestParameters.sharedLockId === undefined) {
            throw new runtime.RequiredError('sharedLockId','Required parameter requestParameters.sharedLockId was null or undefined when calling sharedLockControllerArchive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["shared_locks"]);
        }

        const response = await this.request({
            path: `/locks/shared-locks/{sharedLockId}/archive`.replace(`{${"sharedLockId"}}`, encodeURIComponent(String(requestParameters.sharedLockId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Archives a shared lock
     * Archive a shared lock
     */
    async sharedLockControllerArchive(requestParameters: SharedLockControllerArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sharedLockControllerArchiveRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a shared lock
     * Create a shared lock
     */
    async sharedLockControllerCreateRaw(requestParameters: SharedLockControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSharedLockRepDto>> {
        if (requestParameters.createUpdateSharedLockDto === null || requestParameters.createUpdateSharedLockDto === undefined) {
            throw new runtime.RequiredError('createUpdateSharedLockDto','Required parameter requestParameters.createUpdateSharedLockDto was null or undefined when calling sharedLockControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["shared_locks"]);
        }

        const response = await this.request({
            path: `/locks/shared-locks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUpdateSharedLockDtoToJSON(requestParameters.createUpdateSharedLockDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSharedLockRepDtoFromJSON(jsonValue));
    }

    /**
     * Creates a shared lock
     * Create a shared lock
     */
    async sharedLockControllerCreate(requestParameters: SharedLockControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSharedLockRepDto> {
        const response = await this.sharedLockControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all user shared locks
     * Find all user shared locks
     */
    async sharedLockControllerFindAllRaw(requestParameters: SharedLockControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SharedLockForPublic>>> {
        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["shared_locks"]);
        }

        const response = await this.request({
            path: `/locks/shared-locks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SharedLockForPublicFromJSON));
    }

    /**
     * Returns a list of all user shared locks
     * Find all user shared locks
     */
    async sharedLockControllerFindAll(requestParameters: SharedLockControllerFindAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SharedLockForPublic>> {
        const response = await this.sharedLockControllerFindAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Finds a shared lock by id
     * Find a shared lock by id
     */
    async sharedLockControllerFindOneRaw(requestParameters: SharedLockControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SharedLockForPublic>> {
        if (requestParameters.sharedLockId === null || requestParameters.sharedLockId === undefined) {
            throw new runtime.RequiredError('sharedLockId','Required parameter requestParameters.sharedLockId was null or undefined when calling sharedLockControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["shared_locks"]);
        }

        const response = await this.request({
            path: `/locks/shared-locks/{sharedLockId}`.replace(`{${"sharedLockId"}}`, encodeURIComponent(String(requestParameters.sharedLockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharedLockForPublicFromJSON(jsonValue));
    }

    /**
     * Finds a shared lock by id
     * Find a shared lock by id
     */
    async sharedLockControllerFindOne(requestParameters: SharedLockControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SharedLockForPublic> {
        const response = await this.sharedLockControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a shared lock
     * Update a shared lock
     */
    async sharedLockControllerUpdateRaw(requestParameters: SharedLockControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sharedLockId === null || requestParameters.sharedLockId === undefined) {
            throw new runtime.RequiredError('sharedLockId','Required parameter requestParameters.sharedLockId was null or undefined when calling sharedLockControllerUpdate.');
        }

        if (requestParameters.createUpdateSharedLockDto === null || requestParameters.createUpdateSharedLockDto === undefined) {
            throw new runtime.RequiredError('createUpdateSharedLockDto','Required parameter requestParameters.createUpdateSharedLockDto was null or undefined when calling sharedLockControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["shared_locks"]);
        }

        const response = await this.request({
            path: `/locks/shared-locks/{sharedLockId}`.replace(`{${"sharedLockId"}}`, encodeURIComponent(String(requestParameters.sharedLockId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUpdateSharedLockDtoToJSON(requestParameters.createUpdateSharedLockDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a shared lock
     * Update a shared lock
     */
    async sharedLockControllerUpdate(requestParameters: SharedLockControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sharedLockControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Check if the shared lock is in user favorites
     */
    async sharedLockFavoriteControllerIsFavoriteRaw(requestParameters: SharedLockFavoriteControllerIsFavoriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IsFavoriteSharedLockRepDto>> {
        if (requestParameters.sharedLockId === null || requestParameters.sharedLockId === undefined) {
            throw new runtime.RequiredError('sharedLockId','Required parameter requestParameters.sharedLockId was null or undefined when calling sharedLockFavoriteControllerIsFavorite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["shared_locks"]);
        }

        const response = await this.request({
            path: `/shared-locks/{sharedLockId}/favorite`.replace(`{${"sharedLockId"}}`, encodeURIComponent(String(requestParameters.sharedLockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IsFavoriteSharedLockRepDtoFromJSON(jsonValue));
    }

    /**
     * 
     * Check if the shared lock is in user favorites
     */
    async sharedLockFavoriteControllerIsFavorite(requestParameters: SharedLockFavoriteControllerIsFavoriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IsFavoriteSharedLockRepDto> {
        const response = await this.sharedLockFavoriteControllerIsFavoriteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Remove a favorite shared lock
     */
    async sharedLockFavoriteControllerRemoveFavoriteRaw(requestParameters: SharedLockFavoriteControllerRemoveFavoriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sharedLockId === null || requestParameters.sharedLockId === undefined) {
            throw new runtime.RequiredError('sharedLockId','Required parameter requestParameters.sharedLockId was null or undefined when calling sharedLockFavoriteControllerRemoveFavorite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["shared_locks"]);
        }

        const response = await this.request({
            path: `/shared-locks/{sharedLockId}/favorite`.replace(`{${"sharedLockId"}}`, encodeURIComponent(String(requestParameters.sharedLockId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Remove a favorite shared lock
     */
    async sharedLockFavoriteControllerRemoveFavorite(requestParameters: SharedLockFavoriteControllerRemoveFavoriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sharedLockFavoriteControllerRemoveFavoriteRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Set a shared lock as favorite
     */
    async sharedLockFavoriteControllerSetFavoriteRaw(requestParameters: SharedLockFavoriteControllerSetFavoriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sharedLockId === null || requestParameters.sharedLockId === undefined) {
            throw new runtime.RequiredError('sharedLockId','Required parameter requestParameters.sharedLockId was null or undefined when calling sharedLockFavoriteControllerSetFavorite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["shared_locks"]);
        }

        const response = await this.request({
            path: `/shared-locks/{sharedLockId}/favorite`.replace(`{${"sharedLockId"}}`, encodeURIComponent(String(requestParameters.sharedLockId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Set a shared lock as favorite
     */
    async sharedLockFavoriteControllerSetFavorite(requestParameters: SharedLockFavoriteControllerSetFavoriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sharedLockFavoriteControllerSetFavoriteRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Get user favorite shared locks
     */
    async sharedLockFavoritesControllerGetFavoriteSharedLocksRaw(requestParameters: SharedLockFavoritesControllerGetFavoriteSharedLocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFavoriteSharedLocksRepDto>> {
        if (requestParameters.getFavoriteSharedLocksDto === null || requestParameters.getFavoriteSharedLocksDto === undefined) {
            throw new runtime.RequiredError('getFavoriteSharedLocksDto','Required parameter requestParameters.getFavoriteSharedLocksDto was null or undefined when calling sharedLockFavoritesControllerGetFavoriteSharedLocks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["shared_locks"]);
        }

        const response = await this.request({
            path: `/favorites/shared-locks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetFavoriteSharedLocksDtoToJSON(requestParameters.getFavoriteSharedLocksDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFavoriteSharedLocksRepDtoFromJSON(jsonValue));
    }

    /**
     * 
     * Get user favorite shared locks
     */
    async sharedLockFavoritesControllerGetFavoriteSharedLocks(requestParameters: SharedLockFavoritesControllerGetFavoriteSharedLocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFavoriteSharedLocksRepDto> {
        const response = await this.sharedLockFavoritesControllerGetFavoriteSharedLocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SharedLockControllerFindAllStatusEnum = {
    Active: 'active',
    Archived: 'archived'
} as const;
export type SharedLockControllerFindAllStatusEnum = typeof SharedLockControllerFindAllStatusEnum[keyof typeof SharedLockControllerFindAllStatusEnum];
