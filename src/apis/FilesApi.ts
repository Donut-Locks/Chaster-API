/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetFileFromKeyRepDto,
  UploadFilesRepDto,
} from '../models';
import {
    GetFileFromKeyRepDtoFromJSON,
    GetFileFromKeyRepDtoToJSON,
    UploadFilesRepDtoFromJSON,
    UploadFilesRepDtoToJSON,
} from '../models';

export interface StorageControllerGetFileFromKeyRequest {
    fileKey: string;
}

export interface StorageControllerUploadFilesRequest {
    files: Array<Array<Blob>>;
    type: StorageControllerUploadFilesTypeEnum;
}

/**
 * 
 */
export class FilesApi extends runtime.BaseAPI {

    /**
     * 
     * Find a file
     */
    async storageControllerGetFileFromKeyRaw(requestParameters: StorageControllerGetFileFromKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFileFromKeyRepDto>> {
        if (requestParameters.fileKey === null || requestParameters.fileKey === undefined) {
            throw new runtime.RequiredError('fileKey','Required parameter requestParameters.fileKey was null or undefined when calling storageControllerGetFileFromKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/files/{fileKey}`.replace(`{${"fileKey"}}`, encodeURIComponent(String(requestParameters.fileKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFileFromKeyRepDtoFromJSON(jsonValue));
    }

    /**
     * 
     * Find a file
     */
    async storageControllerGetFileFromKey(requestParameters: StorageControllerGetFileFromKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFileFromKeyRepDto> {
        const response = await this.storageControllerGetFileFromKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload attachments and get an attachment token to be used in messaging and posts  The attachment token expires after one hour.
     * Upload attachments
     */
    async storageControllerUploadFilesRaw(requestParameters: StorageControllerUploadFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadFilesRepDto>> {
        if (requestParameters.files === null || requestParameters.files === undefined) {
            throw new runtime.RequiredError('files','Required parameter requestParameters.files was null or undefined when calling storageControllerUploadFiles.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling storageControllerUploadFiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.files) {
            requestParameters.files.forEach((element) => {
                formParams.append('files', element as any);
            })
        }

        if (requestParameters.type !== undefined) {
            formParams.append('type', requestParameters.type as any);
        }

        const response = await this.request({
            path: `/files/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadFilesRepDtoFromJSON(jsonValue));
    }

    /**
     * Upload attachments and get an attachment token to be used in messaging and posts  The attachment token expires after one hour.
     * Upload attachments
     */
    async storageControllerUploadFiles(requestParameters: StorageControllerUploadFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadFilesRepDto> {
        const response = await this.storageControllerUploadFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const StorageControllerUploadFilesTypeEnum = {
    Messaging: 'messaging'
} as const;
export type StorageControllerUploadFilesTypeEnum = typeof StorageControllerUploadFilesTypeEnum[keyof typeof StorageControllerUploadFilesTypeEnum];
