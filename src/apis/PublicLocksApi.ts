/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExploreCategoryForPublic,
  PublicLockForPublic,
  SearchPublicLockDto,
  SearchPublicLockRepDto,
} from '../models';
import {
    ExploreCategoryForPublicFromJSON,
    ExploreCategoryForPublicToJSON,
    PublicLockForPublicFromJSON,
    PublicLockForPublicToJSON,
    SearchPublicLockDtoFromJSON,
    SearchPublicLockDtoToJSON,
    SearchPublicLockRepDtoFromJSON,
    SearchPublicLockRepDtoToJSON,
} from '../models';

export interface PublicLockControllerFindOneRequest {
    sharedLockId: string;
}

export interface PublicLockControllerGetSharedLockImageRequest {
    sharedLockId: string;
}

export interface PublicLockControllerSearchRequest {
    searchPublicLockDto: SearchPublicLockDto;
}

/**
 * 
 */
export class PublicLocksApi extends runtime.BaseAPI {

    /**
     * Finds a public shared lock
     * Find a public shared lock
     */
    async publicLockControllerFindOneRaw(requestParameters: PublicLockControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicLockForPublic>> {
        if (requestParameters.sharedLockId === null || requestParameters.sharedLockId === undefined) {
            throw new runtime.RequiredError('sharedLockId','Required parameter requestParameters.sharedLockId was null or undefined when calling publicLockControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public-locks/{sharedLockId}`.replace(`{${"sharedLockId"}}`, encodeURIComponent(String(requestParameters.sharedLockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicLockForPublicFromJSON(jsonValue));
    }

    /**
     * Finds a public shared lock
     * Find a public shared lock
     */
    async publicLockControllerFindOne(requestParameters: PublicLockControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicLockForPublic> {
        const response = await this.publicLockControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates an image illustrating the shared lock, to publish it on forums or social networks.
     * Generate a shared lock image
     */
    async publicLockControllerGetSharedLockImageRaw(requestParameters: PublicLockControllerGetSharedLockImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sharedLockId === null || requestParameters.sharedLockId === undefined) {
            throw new runtime.RequiredError('sharedLockId','Required parameter requestParameters.sharedLockId was null or undefined when calling publicLockControllerGetSharedLockImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public-locks/images/{sharedLockId}`.replace(`{${"sharedLockId"}}`, encodeURIComponent(String(requestParameters.sharedLockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generates an image illustrating the shared lock, to publish it on forums or social networks.
     * Generate a shared lock image
     */
    async publicLockControllerGetSharedLockImage(requestParameters: PublicLockControllerGetSharedLockImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.publicLockControllerGetSharedLockImageRaw(requestParameters, initOverrides);
    }

    /**
     * Search for locks
     * Search for locks
     */
    async publicLockControllerSearchRaw(requestParameters: PublicLockControllerSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchPublicLockRepDto>> {
        if (requestParameters.searchPublicLockDto === null || requestParameters.searchPublicLockDto === undefined) {
            throw new runtime.RequiredError('searchPublicLockDto','Required parameter requestParameters.searchPublicLockDto was null or undefined when calling publicLockControllerSearch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/public-locks/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchPublicLockDtoToJSON(requestParameters.searchPublicLockDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchPublicLockRepDtoFromJSON(jsonValue));
    }

    /**
     * Search for locks
     * Search for locks
     */
    async publicLockControllerSearch(requestParameters: PublicLockControllerSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchPublicLockRepDto> {
        const response = await this.publicLockControllerSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the locks of the Explore page
     * Find Explore page locks
     */
    async publicLockExploreControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExploreCategoryForPublic>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/explore/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExploreCategoryForPublicFromJSON));
    }

    /**
     * Returns the locks of the Explore page
     * Find Explore page locks
     */
    async publicLockExploreControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExploreCategoryForPublic>> {
        const response = await this.publicLockExploreControllerFindAllRaw(initOverrides);
        return await response.value();
    }

}
