/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SearchUserUsernameDto,
  UserForPublic,
} from '../models';
import {
    SearchUserUsernameDtoFromJSON,
    SearchUserUsernameDtoToJSON,
    UserForPublicFromJSON,
    UserForPublicToJSON,
} from '../models';

export interface UserSearchControllerGetUserByDiscordIdRequest {
    discordId: string;
}

export interface UserSearchControllerSearchByUsernameRequest {
    searchUserUsernameDto: SearchUserUsernameDto;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * 
     * Search a user by its Discord id
     */
    async userSearchControllerGetUserByDiscordIdRaw(requestParameters: UserSearchControllerGetUserByDiscordIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserForPublic>> {
        if (requestParameters.discordId === null || requestParameters.discordId === undefined) {
            throw new runtime.RequiredError('discordId','Required parameter requestParameters.discordId was null or undefined when calling userSearchControllerGetUserByDiscordId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/users/search/by-discord-id/{discordId}`.replace(`{${"discordId"}}`, encodeURIComponent(String(requestParameters.discordId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserForPublicFromJSON(jsonValue));
    }

    /**
     * 
     * Search a user by its Discord id
     */
    async userSearchControllerGetUserByDiscordId(requestParameters: UserSearchControllerGetUserByDiscordIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserForPublic> {
        const response = await this.userSearchControllerGetUserByDiscordIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Search a user by its username
     */
    async userSearchControllerSearchByUsernameRaw(requestParameters: UserSearchControllerSearchByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserForPublic>>> {
        if (requestParameters.searchUserUsernameDto === null || requestParameters.searchUserUsernameDto === undefined) {
            throw new runtime.RequiredError('searchUserUsernameDto','Required parameter requestParameters.searchUserUsernameDto was null or undefined when calling userSearchControllerSearchByUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/users/search/by-username`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchUserUsernameDtoToJSON(requestParameters.searchUserUsernameDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserForPublicFromJSON));
    }

    /**
     * 
     * Search a user by its username
     */
    async userSearchControllerSearchByUsername(requestParameters: UserSearchControllerSearchByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserForPublic>> {
        const response = await this.userSearchControllerSearchByUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
