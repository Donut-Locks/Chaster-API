/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLockDto,
  CreateLockFromSharedLockDto,
  EditLockExtensionsDto,
  LockCreatedRepDto,
} from '../models';
import {
    CreateLockDtoFromJSON,
    CreateLockDtoToJSON,
    CreateLockFromSharedLockDtoFromJSON,
    CreateLockFromSharedLockDtoToJSON,
    EditLockExtensionsDtoFromJSON,
    EditLockExtensionsDtoToJSON,
    LockCreatedRepDtoFromJSON,
    LockCreatedRepDtoToJSON,
} from '../models';

export interface LockCreationControllerCreateRequest {
    createLockDto: CreateLockDto;
}

export interface LockCreationControllerCreateLockFromSharedLockRequest {
    sharedLockId: string;
    createLockFromSharedLockDto: CreateLockFromSharedLockDto;
}

export interface LockCreationControllerSetLockExtensionsRequest {
    lockId: string;
    editLockExtensionsDto: EditLockExtensionsDto;
}

/**
 * 
 */
export class LockCreationApi extends runtime.BaseAPI {

    /**
     * Creates a personal lock. To create a lock, you must first create a combination by using the combination endpoints, and then provide its identifier.
     * Create a lock
     */
    async lockCreationControllerCreateRaw(requestParameters: LockCreationControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LockCreatedRepDto>> {
        if (requestParameters.createLockDto === null || requestParameters.createLockDto === undefined) {
            throw new runtime.RequiredError('createLockDto','Required parameter requestParameters.createLockDto was null or undefined when calling lockCreationControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["locks"]);
        }

        const response = await this.request({
            path: `/locks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLockDtoToJSON(requestParameters.createLockDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LockCreatedRepDtoFromJSON(jsonValue));
    }

    /**
     * Creates a personal lock. To create a lock, you must first create a combination by using the combination endpoints, and then provide its identifier.
     * Create a lock
     */
    async lockCreationControllerCreate(requestParameters: LockCreationControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LockCreatedRepDto> {
        const response = await this.lockCreationControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a lock from a shared lock. To create a lock, you must first create a combination and then provide its identifier.
     * Create a lock from a shared lock
     */
    async lockCreationControllerCreateLockFromSharedLockRaw(requestParameters: LockCreationControllerCreateLockFromSharedLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LockCreatedRepDto>> {
        if (requestParameters.sharedLockId === null || requestParameters.sharedLockId === undefined) {
            throw new runtime.RequiredError('sharedLockId','Required parameter requestParameters.sharedLockId was null or undefined when calling lockCreationControllerCreateLockFromSharedLock.');
        }

        if (requestParameters.createLockFromSharedLockDto === null || requestParameters.createLockFromSharedLockDto === undefined) {
            throw new runtime.RequiredError('createLockFromSharedLockDto','Required parameter requestParameters.createLockFromSharedLockDto was null or undefined when calling lockCreationControllerCreateLockFromSharedLock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["locks"]);
        }

        const response = await this.request({
            path: `/public-locks/{sharedLockId}/create-lock`.replace(`{${"sharedLockId"}}`, encodeURIComponent(String(requestParameters.sharedLockId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLockFromSharedLockDtoToJSON(requestParameters.createLockFromSharedLockDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LockCreatedRepDtoFromJSON(jsonValue));
    }

    /**
     * Creates a lock from a shared lock. To create a lock, you must first create a combination and then provide its identifier.
     * Create a lock from a shared lock
     */
    async lockCreationControllerCreateLockFromSharedLock(requestParameters: LockCreationControllerCreateLockFromSharedLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LockCreatedRepDto> {
        const response = await this.lockCreationControllerCreateLockFromSharedLockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit extensions for a given lock.  Keyholders can edit extensions if the lock is trusted by the wearer.
     * Edit lock extensions
     */
    async lockCreationControllerSetLockExtensionsRaw(requestParameters: LockCreationControllerSetLockExtensionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lockId === null || requestParameters.lockId === undefined) {
            throw new runtime.RequiredError('lockId','Required parameter requestParameters.lockId was null or undefined when calling lockCreationControllerSetLockExtensions.');
        }

        if (requestParameters.editLockExtensionsDto === null || requestParameters.editLockExtensionsDto === undefined) {
            throw new runtime.RequiredError('editLockExtensionsDto','Required parameter requestParameters.editLockExtensionsDto was null or undefined when calling lockCreationControllerSetLockExtensions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["locks"]);
        }

        const response = await this.request({
            path: `/locks/{lockId}/extensions`.replace(`{${"lockId"}}`, encodeURIComponent(String(requestParameters.lockId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditLockExtensionsDtoToJSON(requestParameters.editLockExtensionsDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit extensions for a given lock.  Keyholders can edit extensions if the lock is trusted by the wearer.
     * Edit lock extensions
     */
    async lockCreationControllerSetLockExtensions(requestParameters: LockCreationControllerSetLockExtensionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.lockCreationControllerSetLockExtensionsRaw(requestParameters, initOverrides);
    }

}
