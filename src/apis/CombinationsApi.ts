/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCodeDto,
  CreateCodeRepDto,
} from '../models';
import {
    CreateCodeDtoFromJSON,
    CreateCodeDtoToJSON,
    CreateCodeRepDtoFromJSON,
    CreateCodeRepDtoToJSON,
} from '../models';

export interface CombinationControllerCreateCodeRequest {
    createCodeDto: CreateCodeDto;
}

export interface CombinationControllerUploadImageRequest {
    file: Array<Blob>;
    enableManualCheck?: boolean;
}

/**
 * 
 */
export class CombinationsApi extends runtime.BaseAPI {

    /**
     * Creates and stores the code combination. Once the code is sent, it cannot be recovered without being associated with a lock. To retrieve the combination, refer to the endpoint `/locks/{lockId}/combination` to get the code.  If the combination is not associated with a lock, it expires after one hour.
     * Create a code combination
     */
    async combinationControllerCreateCodeRaw(requestParameters: CombinationControllerCreateCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCodeRepDto>> {
        if (requestParameters.createCodeDto === null || requestParameters.createCodeDto === undefined) {
            throw new runtime.RequiredError('createCodeDto','Required parameter requestParameters.createCodeDto was null or undefined when calling combinationControllerCreateCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["locks"]);
        }

        const response = await this.request({
            path: `/combinations/code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCodeDtoToJSON(requestParameters.createCodeDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCodeRepDtoFromJSON(jsonValue));
    }

    /**
     * Creates and stores the code combination. Once the code is sent, it cannot be recovered without being associated with a lock. To retrieve the combination, refer to the endpoint `/locks/{lockId}/combination` to get the code.  If the combination is not associated with a lock, it expires after one hour.
     * Create a code combination
     */
    async combinationControllerCreateCode(requestParameters: CombinationControllerCreateCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCodeRepDto> {
        const response = await this.combinationControllerCreateCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads an image and stores the combination. Once the image is uploaded, it cannot be recovered without being associated with a lock. To retrieve the combination, refer to the endpoint `/locks/{lockId}/combination` to get the image URL.  If the combination is not associated with a lock, it expires after one hour.
     * Upload a combination image
     */
    async combinationControllerUploadImageRaw(requestParameters: CombinationControllerUploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCodeRepDto>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling combinationControllerUploadImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["locks"]);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file) {
            requestParameters.file.forEach((element) => {
                formParams.append('file', element as any);
            })
        }

        if (requestParameters.enableManualCheck !== undefined) {
            formParams.append('enableManualCheck', requestParameters.enableManualCheck as any);
        }

        const response = await this.request({
            path: `/combinations/image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCodeRepDtoFromJSON(jsonValue));
    }

    /**
     * Uploads an image and stores the combination. Once the image is uploaded, it cannot be recovered without being associated with a lock. To retrieve the combination, refer to the endpoint `/locks/{lockId}/combination` to get the image URL.  If the combination is not associated with a lock, it expires after one hour.
     * Upload a combination image
     */
    async combinationControllerUploadImage(requestParameters: CombinationControllerUploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCodeRepDto> {
        const response = await this.combinationControllerUploadImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
