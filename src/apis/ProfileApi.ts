/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CurrentUser,
  CurrentUserForProfileSettings,
  LockForPublic,
  ProfileRepDto,
  UserBadgeCount,
  UserForPublic,
} from '../models';
import {
    CurrentUserFromJSON,
    CurrentUserToJSON,
    CurrentUserForProfileSettingsFromJSON,
    CurrentUserForProfileSettingsToJSON,
    LockForPublicFromJSON,
    LockForPublicToJSON,
    ProfileRepDtoFromJSON,
    ProfileRepDtoToJSON,
    UserBadgeCountFromJSON,
    UserBadgeCountToJSON,
    UserForPublicFromJSON,
    UserForPublicToJSON,
} from '../models';

export interface LockVisitorControllerGetUserLocksRequest {
    userId: string;
}

export interface ProfileControllerGetUserRequest {
    username: string;
}

export interface ProfileControllerGetUserByIdRequest {
    userId: string;
}

export interface ProfileControllerGetUserProfileRequest {
    username: string;
}

/**
 * 
 */
export class ProfileApi extends runtime.BaseAPI {

    /**
     * 
     * Get logged user information
     */
    async authMeControllerMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/auth/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentUserFromJSON(jsonValue));
    }

    /**
     * 
     * Get logged user information
     */
    async authMeControllerMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentUser> {
        const response = await this.authMeControllerMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update profile from the authentication server
     */
    async authMeControllerMeEditRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentUserForProfileSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/auth/profile/update`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentUserForProfileSettingsFromJSON(jsonValue));
    }

    /**
     * 
     * Update profile from the authentication server
     */
    async authMeControllerMeEdit(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentUserForProfileSettings> {
        const response = await this.authMeControllerMeEditRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the public locks of a user
     * Return the public locks of a user
     */
    async lockVisitorControllerGetUserLocksRaw(requestParameters: LockVisitorControllerGetUserLocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LockForPublic>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling lockVisitorControllerGetUserLocks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locks/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LockForPublicFromJSON));
    }

    /**
     * Returns the public locks of a user
     * Return the public locks of a user
     */
    async lockVisitorControllerGetUserLocks(requestParameters: LockVisitorControllerGetUserLocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LockForPublic>> {
        const response = await this.lockVisitorControllerGetUserLocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Find a user profile
     */
    async profileControllerGetUserRaw(requestParameters: ProfileControllerGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserForPublic>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling profileControllerGetUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/profile/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserForPublicFromJSON(jsonValue));
    }

    /**
     * 
     * Find a user profile
     */
    async profileControllerGetUser(requestParameters: ProfileControllerGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserForPublic> {
        const response = await this.profileControllerGetUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Find a user by id
     */
    async profileControllerGetUserByIdRaw(requestParameters: ProfileControllerGetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserForPublic>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling profileControllerGetUserById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/profile/by-id/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserForPublicFromJSON(jsonValue));
    }

    /**
     * 
     * Find a user by id
     */
    async profileControllerGetUserById(requestParameters: ProfileControllerGetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserForPublic> {
        const response = await this.profileControllerGetUserByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Find a user profile with details
     */
    async profileControllerGetUserProfileRaw(requestParameters: ProfileControllerGetUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileRepDto>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling profileControllerGetUserProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/profile/{username}/details`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileRepDtoFromJSON(jsonValue));
    }

    /**
     * 
     * Find a user profile with details
     */
    async profileControllerGetUserProfile(requestParameters: ProfileControllerGetUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileRepDto> {
        const response = await this.profileControllerGetUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the user badge count
     * Get the user badge count
     */
    async userBadgeControllerGetUserBadgeCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserBadgeCount>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/users/badge/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserBadgeCountFromJSON(jsonValue));
    }

    /**
     * Returns the user badge count
     * Get the user badge count
     */
    async userBadgeControllerGetUserBadgeCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserBadgeCount> {
        const response = await this.userBadgeControllerGetUserBadgeCountRaw(initOverrides);
        return await response.value();
    }

}
