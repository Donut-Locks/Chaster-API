/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CombinationForPublic,
  TemporaryOpeningSetCombinationDto,
} from '../models';
import {
    CombinationForPublicFromJSON,
    CombinationForPublicToJSON,
    TemporaryOpeningSetCombinationDtoFromJSON,
    TemporaryOpeningSetCombinationDtoToJSON,
} from '../models';

export interface TemporaryOpeningExtensionControllerGetCombinationRequest {
    lockId: string;
}

export interface TemporaryOpeningExtensionControllerGetCombinationFromHistoryEntryRequest {
    actionLogId: string;
    lockId: string;
}

export interface TemporaryOpeningExtensionControllerSetCombinationRequest {
    lockId: string;
    temporaryOpeningSetCombinationDto: TemporaryOpeningSetCombinationDto;
}

/**
 * 
 */
export class ExtensionsTemporaryOpeningApi extends runtime.BaseAPI {

    /**
     * Returns the lock combination  This endpoint only works if the lock is temporarily unlocked by the temporary opening extension
     * Get a lock combination
     */
    async temporaryOpeningExtensionControllerGetCombinationRaw(requestParameters: TemporaryOpeningExtensionControllerGetCombinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CombinationForPublic>> {
        if (requestParameters.lockId === null || requestParameters.lockId === undefined) {
            throw new runtime.RequiredError('lockId','Required parameter requestParameters.lockId was null or undefined when calling temporaryOpeningExtensionControllerGetCombination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["locks"]);
        }

        const response = await this.request({
            path: `/extensions/temporary-opening/{lockId}/combination`.replace(`{${"lockId"}}`, encodeURIComponent(String(requestParameters.lockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CombinationForPublicFromJSON(jsonValue));
    }

    /**
     * Returns the lock combination  This endpoint only works if the lock is temporarily unlocked by the temporary opening extension
     * Get a lock combination
     */
    async temporaryOpeningExtensionControllerGetCombination(requestParameters: TemporaryOpeningExtensionControllerGetCombinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CombinationForPublic> {
        const response = await this.temporaryOpeningExtensionControllerGetCombinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Finds a lock combination from a previous temporary opening
     * Find a combination from an action log
     */
    async temporaryOpeningExtensionControllerGetCombinationFromHistoryEntryRaw(requestParameters: TemporaryOpeningExtensionControllerGetCombinationFromHistoryEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CombinationForPublic>> {
        if (requestParameters.actionLogId === null || requestParameters.actionLogId === undefined) {
            throw new runtime.RequiredError('actionLogId','Required parameter requestParameters.actionLogId was null or undefined when calling temporaryOpeningExtensionControllerGetCombinationFromHistoryEntry.');
        }

        if (requestParameters.lockId === null || requestParameters.lockId === undefined) {
            throw new runtime.RequiredError('lockId','Required parameter requestParameters.lockId was null or undefined when calling temporaryOpeningExtensionControllerGetCombinationFromHistoryEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["locks"]);
        }

        const response = await this.request({
            path: `/extensions/temporary-opening/{lockId}/action-log/{actionLogId}/combination`.replace(`{${"actionLogId"}}`, encodeURIComponent(String(requestParameters.actionLogId))).replace(`{${"lockId"}}`, encodeURIComponent(String(requestParameters.lockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CombinationForPublicFromJSON(jsonValue));
    }

    /**
     * Finds a lock combination from a previous temporary opening
     * Find a combination from an action log
     */
    async temporaryOpeningExtensionControllerGetCombinationFromHistoryEntry(requestParameters: TemporaryOpeningExtensionControllerGetCombinationFromHistoryEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CombinationForPublic> {
        const response = await this.temporaryOpeningExtensionControllerGetCombinationFromHistoryEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the lock combination  This endpoint only works if the lock is temporarily unlocked by the temporary opening extension
     * Set the new combination
     */
    async temporaryOpeningExtensionControllerSetCombinationRaw(requestParameters: TemporaryOpeningExtensionControllerSetCombinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lockId === null || requestParameters.lockId === undefined) {
            throw new runtime.RequiredError('lockId','Required parameter requestParameters.lockId was null or undefined when calling temporaryOpeningExtensionControllerSetCombination.');
        }

        if (requestParameters.temporaryOpeningSetCombinationDto === null || requestParameters.temporaryOpeningSetCombinationDto === undefined) {
            throw new runtime.RequiredError('temporaryOpeningSetCombinationDto','Required parameter requestParameters.temporaryOpeningSetCombinationDto was null or undefined when calling temporaryOpeningExtensionControllerSetCombination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["locks"]);
        }

        const response = await this.request({
            path: `/extensions/temporary-opening/{lockId}/combination`.replace(`{${"lockId"}}`, encodeURIComponent(String(requestParameters.lockId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemporaryOpeningSetCombinationDtoToJSON(requestParameters.temporaryOpeningSetCombinationDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the lock combination  This endpoint only works if the lock is temporarily unlocked by the temporary opening extension
     * Set the new combination
     */
    async temporaryOpeningExtensionControllerSetCombination(requestParameters: TemporaryOpeningExtensionControllerSetCombinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.temporaryOpeningExtensionControllerSetCombinationRaw(requestParameters, initOverrides);
    }

}
