/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOfferRequestDto,
  LockForPublic,
  SessionOfferRequestForKeyholder,
  SessionOfferRequestForPublic,
  ValidateOfferRequestDto,
} from '../models';
import {
    CreateOfferRequestDtoFromJSON,
    CreateOfferRequestDtoToJSON,
    LockForPublicFromJSON,
    LockForPublicToJSON,
    SessionOfferRequestForKeyholderFromJSON,
    SessionOfferRequestForKeyholderToJSON,
    SessionOfferRequestForPublicFromJSON,
    SessionOfferRequestForPublicToJSON,
    ValidateOfferRequestDtoFromJSON,
    ValidateOfferRequestDtoToJSON,
} from '../models';

export interface SessionOfferControllerAcceptKeyholdingRequestRequest {
    offerToken: string;
}

export interface SessionOfferControllerArchiveKeyholdingOfferRequest {
    sessionRequestId: string;
}

export interface SessionOfferControllerCreateKeyholdingOfferRequest {
    lockId: string;
    createOfferRequestDto: CreateOfferRequestDto;
}

export interface SessionOfferControllerGetLockKeyholdingRequestRequest {
    offerToken: string;
}

export interface SessionOfferControllerGetOfferRequestStatusRequest {
    lockId: string;
}

export interface SessionOfferControllerValidateOfferRequestRequest {
    sessionRequestId: string;
    validateOfferRequestDto: ValidateOfferRequestDto;
}

/**
 * 
 */
export class SessionOfferApi extends runtime.BaseAPI {

    /**
     * Accepts a keyholding request from a wearer. By accepting the request, you will become the keyholder. The `offerToken` parameter can be found in the `LockForPublic` object, if the user has enabled this option when creating the lock.
     * Accept a keyholding request
     */
    async sessionOfferControllerAcceptKeyholdingRequestRaw(requestParameters: SessionOfferControllerAcceptKeyholdingRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.offerToken === null || requestParameters.offerToken === undefined) {
            throw new runtime.RequiredError('offerToken','Required parameter requestParameters.offerToken was null or undefined when calling sessionOfferControllerAcceptKeyholdingRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["keyholder"]);
        }

        const response = await this.request({
            path: `/session-offer/token/{offerToken}/accept`.replace(`{${"offerToken"}}`, encodeURIComponent(String(requestParameters.offerToken))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Accepts a keyholding request from a wearer. By accepting the request, you will become the keyholder. The `offerToken` parameter can be found in the `LockForPublic` object, if the user has enabled this option when creating the lock.
     * Accept a keyholding request
     */
    async sessionOfferControllerAcceptKeyholdingRequest(requestParameters: SessionOfferControllerAcceptKeyholdingRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sessionOfferControllerAcceptKeyholdingRequestRaw(requestParameters, initOverrides);
    }

    /**
     * Archives a keyholding offer. If the offer is pending, it cancels the keyholding offer.
     * Archive a keyholding offer
     */
    async sessionOfferControllerArchiveKeyholdingOfferRaw(requestParameters: SessionOfferControllerArchiveKeyholdingOfferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionRequestId === null || requestParameters.sessionRequestId === undefined) {
            throw new runtime.RequiredError('sessionRequestId','Required parameter requestParameters.sessionRequestId was null or undefined when calling sessionOfferControllerArchiveKeyholdingOffer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["locks"]);
        }

        const response = await this.request({
            path: `/session-offer/{sessionRequestId}/archive`.replace(`{${"sessionRequestId"}}`, encodeURIComponent(String(requestParameters.sessionRequestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Archives a keyholding offer. If the offer is pending, it cancels the keyholding offer.
     * Archive a keyholding offer
     */
    async sessionOfferControllerArchiveKeyholdingOffer(requestParameters: SessionOfferControllerArchiveKeyholdingOfferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sessionOfferControllerArchiveKeyholdingOfferRaw(requestParameters, initOverrides);
    }

    /**
     * Allows the wearer to send a keyholding request to another user.
     * Create a keyholding offer
     */
    async sessionOfferControllerCreateKeyholdingOfferRaw(requestParameters: SessionOfferControllerCreateKeyholdingOfferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lockId === null || requestParameters.lockId === undefined) {
            throw new runtime.RequiredError('lockId','Required parameter requestParameters.lockId was null or undefined when calling sessionOfferControllerCreateKeyholdingOffer.');
        }

        if (requestParameters.createOfferRequestDto === null || requestParameters.createOfferRequestDto === undefined) {
            throw new runtime.RequiredError('createOfferRequestDto','Required parameter requestParameters.createOfferRequestDto was null or undefined when calling sessionOfferControllerCreateKeyholdingOffer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["locks"]);
        }

        const response = await this.request({
            path: `/session-offer/lock/{lockId}`.replace(`{${"lockId"}}`, encodeURIComponent(String(requestParameters.lockId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOfferRequestDtoToJSON(requestParameters.createOfferRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allows the wearer to send a keyholding request to another user.
     * Create a keyholding offer
     */
    async sessionOfferControllerCreateKeyholdingOffer(requestParameters: SessionOfferControllerCreateKeyholdingOfferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sessionOfferControllerCreateKeyholdingOfferRaw(requestParameters, initOverrides);
    }

    /**
     * Returns keyholding offers from wearers
     * Return keyholding offers from wearers
     */
    async sessionOfferControllerGetKeyholderRequestsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionOfferRequestForKeyholder>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["keyholder"]);
        }

        const response = await this.request({
            path: `/session-offer/requests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionOfferRequestForKeyholderFromJSON));
    }

    /**
     * Returns keyholding offers from wearers
     * Return keyholding offers from wearers
     */
    async sessionOfferControllerGetKeyholderRequests(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionOfferRequestForKeyholder>> {
        const response = await this.sessionOfferControllerGetKeyholderRequestsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves public information of the lock for the visitor who received a keyholding request link
     * Retrive public information of a lock
     */
    async sessionOfferControllerGetLockKeyholdingRequestRaw(requestParameters: SessionOfferControllerGetLockKeyholdingRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LockForPublic>> {
        if (requestParameters.offerToken === null || requestParameters.offerToken === undefined) {
            throw new runtime.RequiredError('offerToken','Required parameter requestParameters.offerToken was null or undefined when calling sessionOfferControllerGetLockKeyholdingRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/session-offer/token/{offerToken}`.replace(`{${"offerToken"}}`, encodeURIComponent(String(requestParameters.offerToken))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LockForPublicFromJSON(jsonValue));
    }

    /**
     * Retrieves public information of the lock for the visitor who received a keyholding request link
     * Retrive public information of a lock
     */
    async sessionOfferControllerGetLockKeyholdingRequest(requestParameters: SessionOfferControllerGetLockKeyholdingRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LockForPublic> {
        const response = await this.sessionOfferControllerGetLockKeyholdingRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of keyholding offers
     * Return a list of keyholding offers
     */
    async sessionOfferControllerGetOfferRequestStatusRaw(requestParameters: SessionOfferControllerGetOfferRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SessionOfferRequestForPublic>>> {
        if (requestParameters.lockId === null || requestParameters.lockId === undefined) {
            throw new runtime.RequiredError('lockId','Required parameter requestParameters.lockId was null or undefined when calling sessionOfferControllerGetOfferRequestStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["locks"]);
        }

        const response = await this.request({
            path: `/session-offer/lock/{lockId}/status`.replace(`{${"lockId"}}`, encodeURIComponent(String(requestParameters.lockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionOfferRequestForPublicFromJSON));
    }

    /**
     * Returns a list of keyholding offers
     * Return a list of keyholding offers
     */
    async sessionOfferControllerGetOfferRequestStatus(requestParameters: SessionOfferControllerGetOfferRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SessionOfferRequestForPublic>> {
        const response = await this.sessionOfferControllerGetOfferRequestStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Accepts or reject a keyholding offer sent directly by a wearer
     * Accept or reject a keyholding offer from a wearer
     */
    async sessionOfferControllerValidateOfferRequestRaw(requestParameters: SessionOfferControllerValidateOfferRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionRequestId === null || requestParameters.sessionRequestId === undefined) {
            throw new runtime.RequiredError('sessionRequestId','Required parameter requestParameters.sessionRequestId was null or undefined when calling sessionOfferControllerValidateOfferRequest.');
        }

        if (requestParameters.validateOfferRequestDto === null || requestParameters.validateOfferRequestDto === undefined) {
            throw new runtime.RequiredError('validateOfferRequestDto','Required parameter requestParameters.validateOfferRequestDto was null or undefined when calling sessionOfferControllerValidateOfferRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["keyholder"]);
        }

        const response = await this.request({
            path: `/session-offer/{sessionRequestId}`.replace(`{${"sessionRequestId"}}`, encodeURIComponent(String(requestParameters.sessionRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateOfferRequestDtoToJSON(requestParameters.validateOfferRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Accepts or reject a keyholding offer sent directly by a wearer
     * Accept or reject a keyholding offer from a wearer
     */
    async sessionOfferControllerValidateOfferRequest(requestParameters: SessionOfferControllerValidateOfferRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sessionOfferControllerValidateOfferRequestRaw(requestParameters, initOverrides);
    }

}
